# -*- coding: utf-8 -*-
#
# ============================================================================
# About this file:
# ============================================================================
#
#  ThresholdEncryptionSetUp.py : 
#  An auxiliary class used for setting up a threshold encryption scheme.
#
#  This class should be used both to generate a commitment for a threshold 
#  encryption scheme and to combine the commitments of multiple trustees in 
#  order to generate a threshold encryption private/public key pair.
#
#  Part of the PloneVote cryptographic library (PloneVoteCryptoLib)
#
#  Originally written by: Lazaro Clapp
#
# ============================================================================
# LICENSE (MIT License - http://www.opensource.org/licenses/mit-license):
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ============================================================================

import math

from plonevotecryptolib.Threshold.Polynomial import CoefficientsPolynomial
from plonevotecryptolib.Threshold.ThresholdEncryptionCommitment import ThresholdEncryptionCommitment
from plonevotecryptolib.utilities.BitStream import BitStream

class ThresholdEncryptionSetUpStateError(Exception):
	"""
	Raised when a ThresholdEncryptionSetUp operation is called when the 
	instance is in an inappropriate state.
	
	Common examples:
		- generate_commitment called without having registered all the 
		  trustees' public keys.
		- generate_threshold_keypair called without having registered all the 
		  trustees' commitments.				
	"""
    
	def __str__(self):
		return self.msg

	def __init__(self, msg):
		"""
		Create a new ThresholdEncryptionSetUpStateError exception.
		"""
		self.msg = msg


class ThresholdEncryptionSetUp:
	"""
	Used for setting up a threshold encryption scheme.
	
	This class can be used both to generate a commitment for a threshold 
	encryption scheme and to combine the commitments of multiple trustees in 
	order to generate a threshold encryption private/public key pair.
	
	ToDo: Link a comprehensive doctest file showing how this class should be 
	used.
	
	Attributes (public):
		cryptosystem::EGCryptoSystem	-- The shared cryptosystem used by the 
										   threshold scheme.
	"""
	
	def __init__(self, cryptosystem, num_trustees, threshold):
		"""
		Constructs a ThresholdEncryptionSetUp class.
		
		Arguments:
			cryptosystem::EGCryptoSystem	-- The cryptosystem to use for the 
											   threshold scheme.
			num_trustees::int	-- Total number of trustees in the threshold 
								   scheme. (the n in "k of n"-decryption)
			threshold::int	-- Minimum number of trustees required to decrypt 
							   threshold encrypted messages. 
							   (the k in "k of n"-decryption)
		"""
		self.cryptosystem = cryptosystem
		self._num_trustees = num_trustees
		self._threshold = threshold
		# We initialize the array of trustee public keys to None each
		self._trustees_simple_public_keys = [None for i in range(1,num_trustees + 1)]
	
	def add_trustee_public_key(self, trustee, public_key):
		"""
		Registers the (simple, 1-to-1) public key of a trustee with this object.
		
		This public keys are used to secretly transmit information only to a 
		given trustee as part of the threshold encryption set-up protocol. 
		Namely the encrypted partial private keys (P_{i}(j)), which are part of 
		the published commitment generated by each trustee, but encrypted so 
		that only the rightful recipient may read them.
		
		Arguments:
			trustee::int	-- The index within the threshold scheme of the 
							   trustee to which the key to be registered 
							   belongs.
							   (trustees are indexed from 1 to num_trustees)
			public_key::PublicKey	-- The trustee's public key.
		"""
		if(not (1 <= trustee <= self._num_trustees)):
			raise ValueError("Invalid trustee. The threshold scheme trustees " \
							"must be indexed from 1 to %d" % self._num_trustees)
		
		# The trustee indexes go from 1 to n, the pk list indexes go from 0 to 
		# (n-1)					
		self._trustees_simple_public_keys[trustee - 1] = public_key
	
	def generate_commitment(self):
		"""
		Generate a ThresholdEncryptionCommitment towards the threshold scheme.
		
		Returns:
			commitment::ThresholdEncryptionCommitment
		"""
		# 0. Verify that all public keys are available for 1-to-1 encryption.
		for trustee in range(1, self._num_trustees - 1):
			# The trustee indexes go from 1 to n, the pk list indexes go from 0 
			# to (n-1)
			pk = self._trustees_simple_public_keys[trustee - 1]
			if(pk == None):
				raise ThresholdEncryptionSetUpStateError( \
					"generate_commitment() must only be called after all the " \
					"trustees' public keys have been registered with this " \
					"ThresholdEncryptionSetUp instance. Missing public key " \
					"for trustee %d." % trustee)
		
		# 1. Construct a new random polynomial of degree (threshold - 1)
		# Note: A polynomial of degree (t - 1) is determined by any t 
		# (distinct) points.
		degree = self._threshold - 1
		nbits = self.cryptosystem.get_nbits()
		prime = self.cryptosystem.get_prime()
		generator = self.cryptosystem.get_generator()
		polynomial = \
			CoefficientsPolynomial.new_random_polynomial(prime, degree)
		
		# 2. Generate the public "coefficients" (actually g^coefficient for 
		# each coefficient of the polynomial).
		public_coeficients = []
		for coeff in polynomial.get_coefficients():
			public_coeficients.append(pow(generator, coeff, prime)) 
		
		# 3. Generate the partial private keys for each trustee.
		# The partial private key for trustee j is P(j), its full private key 
		# is the sum of the P(j) values generated by all trustees 
		# (including its own).
		# IMPORTANT: We encrypt each partial private key so that only its 
		# intended recipient may read it.
		enc_keys = []
		for trustee in range(1, self._num_trustees - 1):
			pp_key = polynomial(trustee)	# P(j)
			trustee_pk = self._trustees_simple_public_keys[trustee - 1]
			
			# Note that trustee public keys need not use the same cryptosystem 
			# as the threshold encryption. In fact, they might not even have 
			# the same bit length.
			bitstream = BitStream()
			bitstream.put_num(pp_key, nbits)
			ciphertext = trustee_pk.encrypt_bitstream(bitstream)
			enc_keys.append(ciphertext)
		
		# 4. Construct a ThresholdEncryptionCommitment object storing this 
		# commitment and return it.
		return ThresholdEncryptionCommitment(self.cryptosystem, 
			self._num_trustees, self._threshold, public_coeficients, enc_keys)
