* Pre-generated EGCryptoSystems:
	1024 bits : (109237966595020036340983680118817370223535823665094207873578891341095324428193063306495520458538742445366207711433425120726390936364448501478644172464817469052929517778605274609739480691267432086528964565245655702444607571656256754930578380452272559792989742719732000351387627544648539086665466720348897454699L, 72734249948275366520195414089503722018098573107749948099319219142824703809221508180741046011690805743990538113507291940812504783438714918792029358884076624782744234048862830400075590229699188761439873636133905585526921841523184303005738307509925498607438821228035517400691472874495035154798823990239950732333L)
	
	17 Ene:
		+ EGCryptoSystem and EGStub save to/load from file
		+ plonevote.gen_cryptosys tool
	18 Ene:
		+ PrivateKey, PublicKey, KeyPair : generation
		+ encrypt/decrypt bitstream/strings
	19 Ene:
		- save/load keys
		- armored encrypted text format
		- plonevote.gen_keys
		- plonevote.encrypt
		- plonevote.decrypt
		- milestones Sergio
	21 Ene:
		- threshold encryption
	22 Ene:
		- Begin (module) documentation/test work
		
	Next week:
		- mixnets
		- proof of shuffling
		- verifiable decryption

Early optimization is the O(sqrt(n)*lg^2(n)) of all evil...


from utilities.BitStream import BitStream as BS
bs = BS()

s = ""
for i in range(0,100):
	s += "DEADBEEF"

num = int(s, 16)
bit_length = 4*8*100
bs.put_num(num, bit_length)

print [hex(c)[2:-1] for c in bs._cells]
